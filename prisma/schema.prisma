generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ticketReserves {
  id              Int               @id @default(autoincrement())
  amount          Int
  price           Int
  updatedAt       DateTime          @updatedAt
  updatedBy       String
  type            buyerGroups[]     @relation("buyerGroupsToticketReserves")
  deliveryMethods deliveryMethods[] @relation("deliveryMethodsToticketReserves")
  soldTickets     soldTickets[]
}

model soldTickets {
  id        Int      @id @default(autoincrement())
  delivery  String
  code      String   @unique
  paid      Boolean?
  sent      Boolean?
  transref  String
  timestamp DateTime @default(now())
  buyerId   Int
  buyer     Buyers   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  reserveId Int
  reserve   ticketReserves @relation(fields: [reserveId], references: [id])
  soldPrice Int
}

model deliveryMethods {
  id             Int              @id @default(autoincrement())
  name           String
  surcharge      Int?
  ticketReserves ticketReserves[] @relation("deliveryMethodsToticketReserves")
}

model Buyers {
  id         Int           @id @default(autoincrement())
  name       String
  email      String        @unique
  phone      String
  address    String
  postal     Int
  province   String
  country    String
  verified   Boolean
  maxTickets Int
  groupId    Int
  group      buyerGroups   @relation(fields: [groupId], references: [id])
  tickets    soldTickets[]
}

model buyerGroups {
  id             Int              @id @default(autoincrement())
  name           String
  buyers         Buyers[]
  ticketReserves ticketReserves[] @relation("buyerGroupsToticketReserves")
}

model backendUsers {
  id           Int            @id @default(autoincrement())
  firstName    String
  surName      String
  email        String         @unique
  passwordHash String
  groupId      Int?
  group        backendGroups? @relation(fields: [groupId], references: [id])
}

model backendGroups {
  id    Int            @id @default(autoincrement())
  name  String
  users backendUsers[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
